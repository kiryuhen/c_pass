using PasswordManager.ViewModels;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace PasswordManager.Views
{
    /// <summary>
    /// –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            try
            {
                InitializeComponent();
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ PasswordBox
                this.Loaded += MainWindow_Loaded;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞: {ex.Message}\n{ex.StackTrace}",
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º ViewModel
                var viewModel = this.DataContext as MainViewModel;
                
                if (viewModel != null)
                {
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º PasswordBox –∫ —Å–≤–æ–π—Å—Ç–≤—É ViewModel
                    // (—Ç–∞–∫ –∫–∞–∫ PasswordBox –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –∏–∑ –∫–æ—Ä–æ–±–∫–∏)
                    MasterPasswordBox.Password = viewModel.MasterPassword;
                    
                    MasterPasswordBox.PasswordChanged += (s, args) =>
                    {
                        viewModel.MasterPassword = MasterPasswordBox.Password;
                    };
                    
                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Enter
                    MasterPasswordBox.KeyDown += (s, args) =>
                    {
                        if (args.Key == System.Windows.Input.Key.Enter)
                        {
                            if (viewModel.UnlockVaultCommand.CanExecute(null))
                            {
                                viewModel.UnlockVaultCommand.Execute(null);
                            }
                        }
                    };
                    
                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ ViewModel
                    viewModel.PropertyChanged += (s, args) =>
                    {
                        if (args.PropertyName == nameof(viewModel.MasterPassword))
                        {
                            if (MasterPasswordBox.Password != viewModel.MasterPassword)
                            {
                                MasterPasswordBox.Password = viewModel.MasterPassword;
                            }
                        }
                    };
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∏–≤—è–∑–æ–∫: {ex.Message}",
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void MaximizeButton_Click(object sender, RoutedEventArgs e)
        {
            if (this.WindowState == WindowState.Maximized)
            {
                this.WindowState = WindowState.Normal;
                MaximizeButton.Content = "üóñ";
            }
            else
            {
                this.WindowState = WindowState.Maximized;
                MaximizeButton.Content = "üóó";
            }
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void WindowTitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                MaximizeButton_Click(null, null);
            }
            else
            {
                this.DragMove();
            }
        }
    }
}